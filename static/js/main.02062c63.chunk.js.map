{"version":3,"sources":["components/CharacterCard/index.js","components/Container/index.js","components/Title/index.js","components/GameBoard/index.js","App.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","onClick","handleClick","alt","name","src","image","Container","children","Title","id","GameBoard","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","state","guessed","Array","fill","characters","_this2","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","components_Container","components_Title","components_GameBoard","map","character","components_CharacterCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"qr8EAceA,MAXf,SAAuBC,GAEnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASL,EAAMM,aACjCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,iBCDlCC,MAJf,SAAmBX,GACf,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAAaJ,EAAMY,iBCajCC,MAdf,WAII,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMU,GAAG,aACpBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UANM,gCAMN,KACAF,EAAAC,EAAAC,cAAA,UANS,kECMVY,MARf,SAAoBf,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACZJ,EAAMY,kBCwDJI,cApDX,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KAQVM,YAAc,WAEVkB,QAAQC,IAAR,gBATAR,EAAKS,MAAQ,CACTC,QAASC,MAAM,IAAIC,KAAK,MACxBC,cAJWb,wEAuBT,IAAAc,EAAAX,KAKN,OA2BR,SAAiBY,GACbR,QAAQC,IAAIO,GACZ,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGzB,KAAO,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EA5CnBO,CAAQV,GAIJ7B,EAAAC,EAAAC,cAACsC,EAAD,KACIxC,EAAAC,EAAAC,cAACuC,EAAD,MAIAzC,EAAAC,EAAAC,cAACwC,EAAD,KACKvB,KAAKM,MAAMI,WAAWc,IAAI,SAAAC,GAAS,OAChC5C,EAAAC,EAAAC,cAAC2C,EAAD,CACIhC,GAAI+B,EAAU/B,GACdN,KAAMqC,EAAUrC,KAChBuC,IAAKF,EAAU/B,GACfJ,MAAOmC,EAAUnC,MACjBJ,YAAayB,EAAKzB,yBA1C5B0C,mBCJlBC,IAASC,OACLjD,EAAAC,EAAAC,cAACgD,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.02062c63.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n    //This is a function (not a class) so it does not require a render\r\n    return (\r\n        <div className=\"card\" onClick={props.handleClick}> \r\n            <div className=\"card-image\">\r\n                <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n    return  <div className = \"container\">{props.children}</div>\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title() {\r\n    const gameTitle = \"Lord of the Rings Memory Game\"; //passed to return in this component\r\n    const instructions = \"Click on each image only once. Can you get them all? \";  //passed to retrun in this component\r\n\r\n    return (\r\n        <div className=\"row\" id=\"title-row\">\r\n            <div className=\"col s12\">\r\n                <h1>{gameTitle} </h1>\r\n                <h3>{instructions}</h3>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GameBoard (props) {\r\n    return (\r\n        <div className = \"game-board\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;","import React, {Component} from \"react\";\r\nimport CharacterCard from \"./components/CharacterCard\";\r\nimport Container from \"./components/Container\";\r\nimport Title from \"./components/Title\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport characters from \"./characters.json\";\r\n\r\n// shuffle(characters);\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            guessed: Array(12).fill(null),\r\n            characters,\r\n        }\r\n        // this.getCharInfo = this.getCharInfo.bind(this);\r\n    }\r\n\r\n    handleClick = () => {\r\n\r\n        console.log(`Clickity!!!`);\r\n        // const guessed = this.state.guessed.slice();\r\n        // guessed[id] = this.state.characters.id;\r\n\r\n        // if (pickedAlready(guessed)) {\r\n        //     reset();\r\n        // }\r\n        // this.setState({guessed: guessed});\r\n    }\r\n\r\n         \r\n    // every class has a render\r\n    render () {\r\n\r\n        shuffle(characters);\r\n\r\n        // every render has a return, this is used to set the Character Card images and Title\r\n        return (\r\n            <Container>\r\n                <Title>\r\n\r\n                </Title>\r\n\r\n                <GameBoard>\r\n                    {this.state.characters.map(character => (\r\n                        <CharacterCard \r\n                            id={character.id}\r\n                            name={character.name}\r\n                            key={character.id}\r\n                            image={character.image}\r\n                            handleClick={this.handleClick}\r\n                        />  \r\n                    ))}\r\n\r\n                </GameBoard>\r\n\r\n            </Container>\r\n        ); //parentheses encapsulate all info to be returned\r\n    }\r\n};\r\n\r\nexport default App;\r\n\r\n// ====== character array shuffler =======\r\nfunction shuffle(array) {\r\n    console.log(array);\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n}\r\n\r\n// ====== Checks to See if that character id has been selected already ======\r\n// function pickedAlready(guessed) {\r\n//     console.log(\"WILL CHECKED GUESSED ARRAY TO SEE AN CHARACTER ID HAS BEEN GUESSED ALREADY\");\r\n\r\n// };\r\n\r\n// ====== Reset Function ======\r\n\r\n// const reset = () => {\r\n//     console.log(\"RESET SCORE TO 0 and CLEAR GUESSED ARRAY\")\r\n// };\r\n\r\n  \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}