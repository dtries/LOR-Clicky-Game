{"version":3,"sources":["components/CharacterCard/character_card.js","components/Container/container.js","components/Title/title.js","components/GameBoard/game_board.js","components/NavBar/navbar.js","App.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","onClick","handleClick","value","id","alt","name","src","image","Container","children","Title","GameBoard","NavBar","console","log","score","href","highscore","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","startAgain","currentGuess","target","guessChecker","state","guessed","indexOf","setState","concat","toConsumableArray","characters","bind","assertThisInitialized","_this2","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","navbar","container","title","game_board","map","character","character_card","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.25bf6381.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n\r\n    // console.log(`ID is ${props.id}`);\r\n    //This is a function (not a class) so it does not require a render\r\n    return (\r\n        <div className=\"card\" onClick={props.handleClick}> \r\n            <div className=\"card-image\">\r\n                <img value={props.id} alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n    return  <div className = \"container\">{props.children}</div>\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title() {\r\n    const gameTitle = \"Lord of the Rings Memory Game\"; //passed to return in this component\r\n    const instructions = \"Click on each image only once. Can you get them all? \";  //passed to retrun in this component\r\n\r\n    return (\r\n        <div className=\"row\" id=\"title-row\">\r\n            <div className=\"col s12\">\r\n                <h1>{gameTitle} </h1>\r\n                <h3>{instructions}</h3>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GameBoard (props) {\r\n    return (\r\n        <div className = \"game-board\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n    console.log(props.score);\r\n    //This is a function (not a class) so it does not require a render\r\n    return (\r\n        <div className=\"navbar-fixed\">\r\n        <nav className=\"navbar-material\">\r\n                <div className=\"container nav-wrapper\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 m4\">\r\n                            <a href=\"/\" className=\"brand-logo\" id=\"brand\">LOR Game</a>\r\n                        </div>\r\n                        <div className=\"col s12 m4 center\">\r\n                            <i id=\"tag-line\">Click Any Image To Begin</i>\r\n                        </div>\r\n\r\n                        <div className=\"col s12 m4\">\r\n                            <ul className=\"score right\"> \r\n                                <li>Score: {props.score} | Top Score: {props.highscore}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, {Component} from \"react\";\r\nimport CharacterCard from \"./components/CharacterCard/character_card\";\r\nimport Container from \"./components/Container/container\";\r\nimport Title from \"./components/Title/title\";\r\nimport GameBoard from \"./components/GameBoard/game_board\";\r\nimport characters from \"./characters.json\";\r\nimport NavBar from \"./components/NavBar/navbar\";\r\n\r\nvar score = 0;\r\nvar highscore = 0;\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            guessed: [],\r\n            characters,\r\n            score: 0,\r\n            highscore: 0,\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick = e => {\r\n        let startAgain = 0;\r\n        let currentGuess = e.target.alt\r\n        let guessChecker = this.state.guessed.indexOf(currentGuess) > -1;\r\n        console.log(currentGuess);\r\n        console.log(guessChecker);\r\n        \r\n        this.setState({ guessed: [...this.state.guessed, e.target.alt] });\r\n        console.log(this.state.guessed);\r\n\r\n        if (guessChecker) {\r\n            score = 0;\r\n            this.setState ({ guessed: []});\r\n            this.setState ({ score: 0 });\r\n            startAgain = 1;\r\n        }\r\n\r\n        if (startAgain !== 1) {\r\n            score += 1;\r\n        this.setState ({score: score});\r\n        }\r\n\r\n        if (score > highscore) {\r\n            highscore = score;\r\n            this.setState ({highscore: highscore});\r\n        }\r\n        console.log(`The score is ${score}`);\r\n        console.log(`The high score is ${highscore}`);\r\n    }\r\n         \r\n    // every class has a render\r\n    render () {\r\n\r\n        shuffle(characters);\r\n\r\n        // every render has a return, this is used to set the Character Card images and Title\r\n        return (\r\n            <div>\r\n                <NavBar \r\n                    score={this.state.score}\r\n                    highscore={this.state.highscore}\r\n                />\r\n                <Container>\r\n                    <Title />\r\n                    <GameBoard>\r\n                        {this.state.characters.map(character => (\r\n                            <CharacterCard \r\n                                id={character.id}\r\n                                name={character.name}\r\n                                key={character.id}\r\n                                image={character.image}\r\n                                handleClick={this.handleClick}\r\n                            />  \r\n                        ))}\r\n\r\n                    </GameBoard>\r\n\r\n                </Container>\r\n            </div>\r\n        ); //parentheses encapsulate all info to be returned\r\n    }\r\n};\r\n\r\nexport default App;\r\n\r\n// ====== character array shuffler =======\r\nfunction shuffle(array) {\r\n    console.log(array);\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n}  \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}